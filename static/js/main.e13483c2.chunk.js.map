{"version":3,"sources":["components/Header.js","components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","id","this","props","title","Component","Clock","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","tick","setState","time","Date","state","days","months","document","getElementById","checked","style","display","marginTop","_this2","tickInterval","setInterval","clearInterval","type","value","onChange","hideDate","htmlFor","getHours","getMinutes","getSeconds","getDay","getDate","getMonth","getFullYear","App","Header_Header","Clock_Clock","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e13483c2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport \"../styles/Header.css\"\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-lg navbar-light\">\r\n                    <div className=\"container\">\r\n                        <div id=\"content\">\r\n                            <i className=\"far fa-clock fa-4x\" />\r\n                            <h1>{this.props.title}</h1>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport \"../styles/Clock.css\";\r\n\r\nexport default class Clock extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {time : new Date()};\r\n        this.days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n        this.months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"Agust\", \"September\", \"October\", \"November\", \"December\"];\r\n    }\r\n\r\n    hideDate(){\r\n        if(document.getElementById(\"checkDate\").checked === true){\r\n            document.getElementById(\"date\").style.display = \"block\";\r\n            document.getElementById(\"time\").style.marginTop = \"60px\";\r\n        }\r\n        else{\r\n            document.getElementById(\"date\").style.display = \"none\";\r\n            document.getElementById(\"time\").style.marginTop = \"72px\";\r\n        }\r\n    }\r\n\r\n    tick = () => {\r\n        this.setState({\r\n            time : new Date()\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.tickInterval = setInterval(() => {\r\n            this.tick();\r\n        }, 1000);\r\n\r\n        // sets init of checkbox value\r\n        document.getElementById(\"checkDate\").checked = true;\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.tickInterval);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id = \"clock\">\r\n                {/* Rounded switch */}\r\n                <div id = \"panel\">\r\n                    <label className=\"switch\" id=\"switch-date\">\r\n                        <input type=\"checkbox\" id=\"checkDate\" value = \"true\" onChange={this.hideDate}/>\r\n                        <span className=\"slider round\"></span>\r\n                    </label>\r\n                    <label className=\"switch-text\" htmlFor=\"switch-date\">\r\n                        <i className=\"far fa-calendar-alt fa-3x\"></i>\r\n                    </label>\r\n                </div>\r\n            \r\n                <div id=\"context\">\r\n                    <div id=\"time\">\r\n                        {this.state.time.getHours() < 10 ? \"0\" : \"\"}{this.state.time.getHours()}:\r\n                        {this.state.time.getMinutes() < 10 ? \"0\" : \"\"}{this.state.time.getMinutes()}:\r\n                        {this.state.time.getSeconds() < 10 ? \"0\" : \"\"}{this.state.time.getSeconds()}\r\n                    </div>\r\n                    <div id=\"date\">\r\n                        {this.days[this.state.time.getDay()] + \" \"}\r\n                        {this.state.time.getDate() < 10 ? \"0\" : \"\"}{this.state.time.getDate()} \r\n                        {\" \" + this.months[this.state.time.getMonth()]}\r\n                        {\" \" + this.state.time.getFullYear()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport Clock from './components/Clock';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header title = \"React Clock\"/>\r\n      <Clock />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}